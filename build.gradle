plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.0'
	id 'io.spring.dependency-management' version '1.1.0'
}

group = 'dk.addvanced'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

springBoot {
	buildInfo()
}

tasks.named("bootBuildImage") {

	def builderPackage = (System.getenv("BUILDER_PACKAGE") ?: "").trim()
	if (!builderPackage.isEmpty()) {
		builder = builderPackage
	}

	def dockerUrl = (System.getenv("DOCKER_URL") ?: "").trim()
	def dockerRegistry = (System.getenv("DOCKER_REGISTRY") ?: "").trim()
	if (dockerRegistry.isEmpty()) {
		throw new GradleException("DOCKER_REGISTRY environment variable is not set or empty.")
	}
	if(!dockerUrl.isEmpty()) {
		dockerRegistry = "$dockerUrl/$dockerRegistry"
	}

	def dockerUsername = (System.getenv("DOCKER_USERNAME") ?: "").trim()
	if (dockerUsername.isEmpty()) {
		throw new GradleException("DOCKER_USERNAME environment variable is not set or empty.")
	}

	def dockerPassword = (System.getenv("DOCKER_PASSWORD") ?: "").trim()
	if (dockerPassword.isEmpty()) {
		throw new GradleException("DOCKER_PASSWORD environment variable is not set or empty.")
	}

	def buildImageName = (System.getenv("IMAGE_NAME") ?: ("$rootProject.name"?:"").trim().toLowerCase()).trim()
	if (buildImageName.isEmpty()) {
		throw new GradleException("IMAGE_NAME environment variable, and rootProject name is empty.")
	}

	def imageVersion = (System.getenv("IMAGE_VERSION") ?: ("$project.version"?:"").trim()).trim().replaceFirst(/^[vV]/, '')
	if (imageVersion.isEmpty()) {
		throw new GradleException("IMAGE_VERSION environment variable, and project version is not set or empty.")
	}

	imageName = "${dockerRegistry}/${buildImageName}:${imageVersion}"
	if (Boolean.parseBoolean((System.getenv("TAG_LATEST") ?: "true").trim())) {
		tags = ["${dockerRegistry}/${buildImageName}:latest"]
	}

	publish = true
	docker {
		publishRegistry {
			if(!dockerUrl.isEmpty()) {
				url = dockerUrl
			}
			username = dockerUsername
			password = dockerPassword
		}
	}

	buildCache {
		volume {
			name = "cache-${rootProject.name}.build"
		}
	}
	launchCache {
		volume {
			name = "cache-${rootProject.name}.launch"
		}
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}
